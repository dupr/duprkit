#!/usr/bin/perl6
=begin DESCRIPTION
FLINK: Debian User Recipes
Copyright (C) 2019 M. Zhou <lumin@debian.org>

Recipe-Specification
--------------------
A .rcp file is a concatenation of a shell script and an HFT file.
It defines how to get and prepare the source tree, as well as how to
debianize the source tree.

Recipe Example
--------------

::
    src="foobar"
    ^ debian/compat
    11
    ^ debian/source/format
    3.0 (native)
=end DESCRIPTION

constant $__version__ = '0.1a';
constant $SH = '/bin/sh';
constant $DUPR_DEFCOLL = "$*HOME/.defcoll";
constant $COLLECTOR = '/usr/bin/duprCollector';
constant $GIT = '/usr/bin/git';
constant $TEMPLATE = '/usr/share/doc/duprkit/examples/template.rcp';
constant $PYTHON3 = '/usr/bin/python3';
constant $FLINKH = '/usr/bin/flinkH';
constant $FLINK = '/usr/bin/flink';
constant $FLINKG = '/usr/bin/flinkG';
constant $CACHEDIR = "$*HOME/.cache/duprkit/distfiles/";
constant $CONFIG = "$*HOME/.cache/duprkit/config";
constant $CACHE = "$*HOME/.cache/duprkit/";
constant $_C162 = "\x1b[1;38;5;162m";
constant $_C36  = "\x1b[1;36m";
constant $_c    = "\x1b[0m";
constant $COLLECTIONS = qq :heredoc/EOH/;
https://github.com/dupr/DefaultCollection
https://github.com/dupr/DefaultCookbook
https://github.com/dupr/DefaultRepacks
https://github.com/dupr/DefaultTricks
EOH

sub flink_fetch () {
    # check config file
    if not $CONFIG.IO.f {
        $CONFIG.IO.dirname.IO.mkdir;
        $CONFIG.IO.spurt($COLLECTIONS);
    }
    chdir $CACHE;
    for 'config'.IO.lines {
        my $collname = $_.IO.basename;
        if $collname.IO.d {
            say "{$_C162}→ Pulling {$_C36}{$_}{$_C162} ...{$_c}";
            chdir $collname;
            run $GIT, 'pull';
            chdir '..';
        } else {
            say "{$_C162}→ Cloning {$_C36}{$_}{$_C162} ...{$_c}";
            run $GIT, 'clone', $_, $collname;
        }
    }
}

sub flink_split (Str $PATH)
{
    $PATH.IO.f || die "Non-existent file [$PATH]!" ;
    $PATH ~~ /.*.rcp$/ || die "Unsupported file $PATH !";

    my $path_yml = $PATH.IO.basename.subst(/\.rcp$/, '.yaml');
    my $path_hft = $PATH.IO.basename.subst(/\.rcp$/, '.hft');
    my $path_json = $PATH.IO.basename.subst(/\.rcp$/, '.json');
    my $path_sh = $PATH.IO.basename.subst(/\.rcp$/, '.sh');
    my $fp_yml := open :w, $path_yml;
    my $fp_hft := open :w, $path_hft;
    my $fp = $fp_yml;
    for $PATH.IO.lines {
        if m/^\^/ { $fp = $fp_hft; }
        $fp.say: $_;
    }
    close $fp_yml; close $fp_hft;
    say "{$_C162}flink-split:{$_c} [{$_C36}{$PATH}{$_c}] $path_yml";
    say "{$_C162}flink-split:{$_c} [{$_C36}{$PATH}{$_c}] $path_hft";
    run $FLINKH, 'subst', '--yaml', $path_yml, $path_yml;
    run $FLINKH, 'subst', '--yaml', $path_yml, $path_hft;
    run $FLINKH, 'dumpyaml', $path_yml, '--output', $path_json;
    say "{$_C162}flink-split:{$_c} [{$_C36}{$path_yml}{$_c}] $path_json";
    run $FLINKH, 'pipeline_sh', '--yaml', $path_yml;
    say "{$_C162}flink-split:{$_c} [{$_C36}{$path_yml}{$_c}] $path_sh";
	#say 'Dumping YAML content:';
    #run $FLINKH, 'dumpyaml', $path_yml;
}

sub flink_cache (Str $PKG, Str $URL)
{
    my $cache = $CACHEDIR ~ '/' ~ $PKG;
    $CACHEDIR.IO.mkdir if not $CACHEDIR.IO.d;
    if not $cache.IO.r {
        run 'wget', $URL, '-O', $cache;
    }
    run 'cp', '-v', $cache, $PKG;
}

sub flink_checksum (Str $FILE, Str $TYPE, Str $HASH)
{
    #FIXME
    say "NotImplemented";
}

sub flink_unfold (Str $PATH)
{
    flink_split $PATH;
    my $shell_file = $PATH.IO.basename.subst(/\.rcp$/, '.sh');
    say "{$_C162}flink-unfold:{$_c} executing [{$_C36}{$shell_file}{$_c}]";
    run $SH, $shell_file;
}

sub flink_create (Str $NAME, Bool $STRIP = False)
{
    if $STRIP {
        run 'cp','-v', $TEMPLATE, $NAME ~ '.rcp';
    } else {
        my $fp = open :w, $NAME ~ '.rcp';
        for $TEMPLATE.IO.lines {
            if !m/^\^\#/ && !m/^\s*\#/ || m/^\#\!/ {
                $fp.say: $_;
            } #else { .say }
        }
        $fp.close;
    }
}

sub flink_buildpackage (Str $PATH, Str $OPTS)
{
    flink_split $PATH;
    my $shell_file = $PATH.IO.basename.subst(/\.rcp$/, '.sh');
    my $hft_file = $PATH.IO.basename.subst(/\.rcp$/, '.hft');
    my $yaml_file = $PATH.IO.basename.subst(/\.rcp$/, '.yaml');
    my $json_file = $PATH.IO.basename.subst(/\.rcp$/, '.json');
    # add something to the pipeline before execution
    my $fp_shell = open :a, $shell_file;
    $fp_shell.say: '# Automatically appended by FLINK';
    $fp_shell.say: 'export PATH=/usr/lib/ccache:$PATH';
    $fp_shell.say: 'cd $Source';
    $fp_shell.say: "dpkg-buildpackage $OPTS";
    $fp_shell.close;
    # execute shell script now
    say "{$_C162}→ Executing {$_C36}{$shell_file} {$_C162}...{$_c}";
    run $SH, $shell_file;
    # cleanup files
    $shell_file.IO.unlink;
    $hft_file.IO.unlink;
    $yaml_file.IO.unlink;
    $json_file.IO.unlink;
}

sub flink_boldguess () {
    shell 'flinkG | tee flinkBoldGuess.rcp';
    shell 'flinkH gen_debian -y flinkBoldGuess.rcp -d .';
    'flinkBoldGuess.rcp'.IO.unlink;
}

sub flink_reckless () {
    flink_boldguess;
    shell 'dpkg-buildpackage -nc -us -uc;';
}

sub MAIN (Str $ACTION, Str $TARGET = "", Str $ARGV3 = "", Str $ARGV4 = "")
{
    given $ACTION {
        when 'f' | 'fetch' {
            flink_fetch;
        }
        when 'l' | 'ls' | 'list' | 'Ss' {
            if $TARGET.chars {
                run $COLLECTOR, '-s', $TARGET, $DUPR_DEFCOLL;
            } else {
                run $COLLECTOR, $DUPR_DEFCOLL;
            }
        }
        when 's' | 'split' {
            flink_split $TARGET;
        }
        when 'cache' {
            flink_cache $TARGET, $ARGV3;
        }
        when 'checksum' {
            flink_checksum $TARGET, $ARGV3, $ARGV4;
        }
        when 'u' | 'unfold' {
            flink_unfold $TARGET;
        }
        when 'c' {
            flink_create $TARGET, True;
        }
        when 'create' {
            flink_create $TARGET, False;
        }
        when 'dsc' {
            flink_buildpackage $TARGET, '-nc -us -uc -S';
        }
        when 'deb' {
            flink_buildpackage $TARGET, '-nc -us -uc';
        }
        when 'g' | 'guess' {
            run $FLINKG;
        }
        when 'bg' | 'boldguess' {
            flink_boldguess;
        }
        when 'reckless' {
            flink_reckless;
        }
		when 'lscan' {
			shell 'fdfind -t f -exec flinkV 2>/dev/null';
		}
        default {
            die "Unknown action???"
        }
    }
}

sub USAGE() {
    print qq :to/EOH/;
{$_C162}-- Debian User Recipe ToolKit $__version__ --{$_c}
Usage: {$*PROGRAM-NAME} action [args]

Actions
   f|fetch                  Fetch the recipe collections defined in config
   l|ls|list|Ss [keyword]   List/search packages in default collection
   s|split <.rcp>           Split .rcp file into auxiliary files,
                            with an extra placeholder processing step.
                            (converts recipe -> YAML,HFT,JSON,SHELL)
   u|unfold <.rcp>          Unfold .rcp file into debianized source tree.
                            (converts recipe -> debianized source tree)
   c|create <name>          Create standard template file: <name>.rcp
                            'create' produces a self-doc'ed one, while 'c' does not
                            (converts nothing -> standard-recipe)
   g|guess                  Guess recipe for the current working directory,
                            or just print a minimal recipe template
                            (converts nothing -> dynamic+minimal-recipe)
   bg|boldguess             Guess and generate debian directory without doubt
                            (converts nothing -> debian/ direcotry)
   reckless                 Bold-guess and trigger dpkg-buildpackage
                            (converts nothing -> .deb package)
   deb <.rcp>               Shortcut: Build .deb files from .rcp
   dsc <.rcp>               Shortcut: Build .dsc files from .rcp
   lscan                    Scan licenses recursively from CWD
EOH
}
