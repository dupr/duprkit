#!/usr/bin/python3
# Debian User Recipe Toolkit Helper
# Copyright (C) 2019 M. Zhou <lumin@debian.org>
import argparse, re, sys, os, json
import yaml

def main_dumpyaml(argv):
    ag = argparse.ArgumentParser()
    ag.add_argument('yaml', type=str, help='yaml file')
    ag.add_argument('--output', type=str, default='',
            help='redirect json dump to specifid file')
    ag = ag.parse_args(argv)
    if not ag.output:
        print(json.dumps(yaml.load(open(ag.yaml).read()), indent=2))
    else:
        with open(ag.output, 'w') as f:
            f.write(json.dumps(yaml.load(open(ag.yaml).read()), indent=2))

def main_subst(argv):
    ag = argparse.ArgumentParser()
    ag.add_argument('--yaml', type=str, help='source yaml file')
    ag.add_argument('target', type=str, help='target file')
    ag = ag.parse_args(argv)
    yml = yaml.load(open(ag.yaml, 'r').read())
    lines = open(ag.target, 'r').readlines()
    r_stub = re.compile('@[-\w\_]*?@')
    updated_lines = []
    for (i, line) in enumerate(lines):
        stubs = r_stub.findall(line)
        if stubs:
            #print(i, line.strip())
            for stub in stubs:
                stub = stub.replace('@', '')
                if stub not in yml.keys():
                    raise AttributeError(f"Invalid key '@{stub}@'")
                value = yml[stub]
                line = line.replace(f'@{stub}@',
                        str(value) if (value is not None) else ' ')
                sys.stderr.write(f'line[{i}]: @{stub}@ -> {value}\n')
        updated_lines.append(line)
    with open(ag.target, 'w') as f:
        f.writelines(updated_lines)

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print(f'Usage: {__file__} <ACTION> [<ARGUMENTS>]')
        print('Actions: dumpyaml')
        exit(0)
    # NOTE: I don't like the subparsers (argparse).
    eval(f'main_{sys.argv[1]}')(sys.argv[2:])
