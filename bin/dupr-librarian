#!/usr/bin/python3
# Maybe mimicing the "emerge --search" style
import sys,os,re,json,argparse
green  = lambda x: f'\x1b[32m{x}\x1b[m'
Yellow = lambda x: f'\x1b[1;33m{x}\x1b[m'
Cyan   = lambda x: f'\x1b[1;36m{x}\x1b[m'

ag = argparse.ArgumentParser()
ag.add_argument('-o', '--output', type=str, default=None, help='save json')
ag.add_argument('-v', '--verbose', action='store_true')
ag.add_argument('collection', nargs='?', default='.', help='scan witch dir?')
ag = ag.parse_args()

Collection = []  # A List of Dictionaries
for root, dirs, files in os.walk(ag.collection):
    for name in files:
        if name.endswith('.durpkg'):
            path = os.path.join(root, name)
            lines = open(path, 'r').readlines()
            try:
                pkgsrc = [x for x in lines if re.match('^src=.*', x)][0]
                pkgsrc = re.match('^src=[\'\"](.+)[\'\"]', pkgsrc).group(1)
                pkgdesc = [x for x in lines if re.match('^description=.*', x)][0]
                pkgdesc = re.match('^description=[\'\"](.+)[\'\"]', pkgdesc).group(1)
            except IndexError as e:
                print(f'"src" and "description" variables are missing from {path} !')
                exit(1)
            if ag.verbose: print(path, '... OK')
            d = {'.durpkg': path, 'src': pkgsrc, 'description': pkgdesc}
            Collection.append(d)

if ag.output is not None:
    with open(ag.output, 'w') as f:
        f.write(json.dumps(Collection, indent=4))

#print(json.dumps(Collection, indent=4))
for item in Collection:
    durpkg, src, desc = item['.durpkg'], item['src'], item['description']
    print(f'\x1b[1;32m*  \x1b[1;37m{durpkg}\x1b[m')
    print(green('       Source Name:'), f'{src}')
    print(green('       Description:'), f'{desc}')
    print()
print('Found', Yellow(f'{len(Collection)}'), f'packages in "{ag.collection}"')
