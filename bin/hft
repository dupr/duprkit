#!/usr/bin/python3
'''
Hatless Folded Text: Lib, Utility
=================================
Copyright (C) 2019 M. Zhou <lumin@debian.org>

Typical Usage
-------------

Fold a directory of (hatless) plain files in verbose mode::

  hft -v -f debian -o debian.hft

Unfold an HFT file into the directory in verbose mode::

  hft -v -u debian.hft -d destdir
'''
import argparse
import sys, os, re, stat, chardet
from typing import *

__VERSION__ = '0.0i'

__HFT_SPEC__ = '''
Hatless Folded Text (HFT) Specification
---------------------------------------

Hatless Folded Text basically resembles sort of plain text 'tar'.
An HFT file uses lines starting with "^" as special control messages,
so it doesn't support "folding" any text file that contains a line
starting with "^". HFT supports several kinds of control messages:

1. "^ FILENAME [MODE]"
   Any following non-control messages are regarded as the content of
   file FILENAME. MODE is the optional file mode of FILENAME in python
   Octet literal form, e.g. "0o755".

   Example::

       ^ bin/helloworld 0o755
       #!/bin/sh
       echo "Hello, world!"

2. "^# COMMENT"
   Single-line comment. Can be placed anywhere in an HFT file.

3. "^ FILENAME -> TARGET"
   A symbol link FILENAME pointing to TARGET.

Note, HFT doesn't support embedding binary blobs, deliberately.
'''


_C36  = "\x1b[1;36m"
_c36  = "\x1b[0;36m"
_C162 = "\x1b[1;38;5;162m"
_c    = "\x1b[0;m"


def hft_fold(path: str, *, verbose=False) -> List[str]:
    '''
    Fold a given file or directory into hft format. It is basically
    equivalent to::

        #!/bin/sh
        for file in $(find $1 -type f | sort); do
            echo "^ $file"
            cat $file
        done
    '''
    if os.path.isfile(path):
        raise NotImplementedError
    elif os.path.isdir(path):
        hft = []
        for root, dirs, files in os.walk(path):
            for name in files:
                # probe the file
                p = os.path.join(root, name)
                if os.path.islink(p):
                    hft.append(f'^ {p} -> {os.readlink(p)}\n')
                    if verbose: print(f'{_C162}HFT-fold:{_c}', p, '->',
                            os.readlink(p))
                    continue
                elif not os.path.isfile(p):
                    raise TypeError(f"Unsupported File Type: {p}!")
                fmode = oct(os.stat(p).st_mode)
                hft.append(f'^ {p} {fmode}\n')
                # open and read the lines
                f = open(p, 'rt')
                try:
                    lines = f.readlines()
                except UnicodeError as e:
                    f.close()
                    enc = chardet.detect(open(p, 'rb').read())['encoding']
                    f = open(p, 'rt', encoding=enc)
                    lines = f.readlines()
                if verbose: print(f'{_C162}HFT-fold:{_c}', p)
                # syntax check
                if any([x.startswith('^') for x in lines]):
                    print(f'{p}: Syntax Error!')
                    raise SyntaxError("Hat(^)-leading line is not allowed!")
                # append and next
                hft.extend(lines)
                f.close()
        return hft
    else:
        raise TypeError(f"Unsupported {path}!")


def hft_unfold(hft: List[str], destdir:str='', *,
        verbose:bool=False, force:bool=False) -> None:
    '''
    Unfold an HFT file.
    '''
    curline, rest, fp, fmode = None, hft, None, None
    r_file_mode = re.compile('^\^\s*([/\S]+)\s+([o\d]+)\s*$')
    r_file      = re.compile('^\^\s*([/\S]+)\s*$')
    r_symlink   = re.compile('^\^\s*([/\S]+)\s*->\s*([/\S]+)\s*$')
    while len(rest) > 0:
        curline, rest = rest[0], rest[1:]
        if re.match('^\^#.*$', curline):
            # A COMMENT LINE
            continue
        elif any([r_file.match(curline), r_file_mode.match(curline)]):
            # A PATH-MODE LINE
            if fp is not None:
                fp.close()
                fp = None
            # parse the "^ filepath [mode]" line
            if r_file_mode.match(curline):
                path, fmode = r_file_mode.match(curline).groups()
                fmode = eval(fmode)
            elif r_file.match(curline):
                path, fmode = r_file.match(curline).group(1), None
            else:
                raise SyntaxError(f"Parser Error: Invalid line '{curline}'")
            # create the new file
            path = os.path.join(destdir, path)
            if os.path.exists(path) and not force:
                raise Exception(f'{path} already exists!')
            if not os.path.exists(os.path.dirname(path)):
                os.makedirs(os.path.dirname(path))
            fp = open(path, 'w')
            if fmode is not None: os.chmod(path, fmode)
            if verbose: print(f'{_C162}HFT-unfold:{_c}', path)
        elif r_symlink.match(curline):
            # A SYMLINK LINE
            if fp is not None:
                fp.close(); fp = None;
            sldst, slsrc = r_symlink.match(curline).groups()
            path = os.path.join(destdir, sldst)
            if os.path.exists(path) and not force:
                raise Exception(f'{path} already exists!')
            if not os.path.exists(os.path.dirname(path)):
                os.makedirs(os.path.dirname(path))
            if os.path.exists(path) and force:
                os.unlink(path)
            os.symlink(slsrc, path)
            if verbose: print(f'{_C162}HFT-unfold:{_c}', path, '->', slsrc)
        else:  # NORMAL CONTENT
            if fp is None:
                raise SyntaxError(f"SyntaxError: {curline}")
            fp.write(curline)
    if fp is not None: fp.close()
    return


if __name__ == '__main__':

    ag = argparse.ArgumentParser()
    ag.add_argument('-f', '--fold', type=str, default='', required=False,
            help='fold the given file or directory')
    ag.add_argument('-o', '--output', type=str, default='', required=False,
            help='specify output file of the folded result (incl. /dev/stdout)')
    ag.add_argument('-u', '--unfold', type=str, default='', required=False,
            help='unfold the given HFT file, (incl. /dev/stdin)')
    ag.add_argument('-d', '--destdir', type=str, default='', required=False,
            help='destination directory when unfolding an HFT file')
    ag.add_argument('-F', '--force', action='store_true', required=False,
            help='force overwrite the output destination')
    ag.add_argument('-S', '--spec', action='store_true', required=False,
            help='print the Hatless Folded Text spec')
    ag.add_argument('-v', '--verbose', action='store_true', required=False,
            help='toggle verbose mode')
    ag.add_argument('-V', '--version', action='store_true', required=False,
            help='print version information')
    ag, agparser = ag.parse_args(), ag

    # Misc info.
    if ag.version:
        print(f'Hatless Folded Text, Version {__VERSION__}')
        exit(0)
    elif ag.spec:
        print(__HFT_SPEC__)
        exit(0)

    # Do folding / unfolding
    if not any([ag.fold, ag.unfold]):
        agparser.print_help()
    elif all([ag.fold, ag.unfold]):
        raise ValueError("Both fold and unfold have been specified!")
    elif ag.fold:
        if not ag.output:
            ag.output = re.sub('/*$', '', ag.fold) + '.hft'
        if os.path.exists(ag.output) and not ag.force:
            raise Exception(f"{ag.output} already exists!")
        hft = hft_fold(ag.fold, verbose=ag.verbose)
        with open(ag.output, 'w') as f:
            f.writelines(hft)
    elif ag.unfold:
        with open(ag.unfold, 'r') as f:
            hft = f.readlines()
        hft_unfold(hft, ag.destdir, verbose=ag.verbose, force=ag.force)
