#!/usr/bin/python3
'''
Hatless Folded Text: Lib, Utility
Copyright (C) 2019 M. Zhou <lumin@debian.org>
'''
import argparse
import sys, os, re, stat
from typing import *

__VERSION__ = '0.0c'

__HFT_SPEC__ = '''
Hatless Folded Text (HFT) Specification
---------------------------------------

Hatless Folded Text basically resembles sort of plaintext 'tar'.
An HFT file, is a series of (filepath,content) plain texts,
where the filepath line has a special format "^ FILENAME".
For example, "^ debian/rules", "^ /tmp/foobar".
The content can contain any plain text except for any line
starts with the hat (^). Comment lines starts with "^#".

HFT spec has some features:

  1. It doesn't support embedding binary blobs, deliberately.
  2. The content must NOT contain any line that starts with a hat (^).

HFT Example
-----------

::
    ^# This is a comment
    ^ debian/compat
    11
    ^ debian/source/format
    3.0 (native)
    ^ debian/rules
    #!/usr/bin/make -f
    %:
        dh $@
    ^ debian/README
    first line of readme
    ^# You can even write a comment in-line
    second line of readme
'''


def hft_fold(path: str, *, verbose=False) -> List[str]:
    '''
    Fold a given file or directory into hft format. It is basically
    equivalent to::

        #!/bin/sh
        for file in $(find $1 -type f | sort); do
            echo "^ $file"
            cat $file
        done
    '''
    if os.path.isfile(path):
        raise NotImplementedError
    elif os.path.isdir(path):
        hft = []
        for root, dirs, files in os.walk(path):
            for name in files:
                p = os.path.join(root, name)
                if not os.path.isfile(p):
                    raise TypeError(f"Unsupported File Type: {p}!")
                hft.append(f'^ {p}\n')
                with open(p, 'r') as f:
                    if verbose: print(p)
                    lines = f.readlines()
                    if any([x.startswith('^') for x in lines]):
                        raise SyntaxError("Hat(^)-leading line is not allowed!")
                    hft.extend(lines)
        return hft
    else:
        raise TypeError(f"Unsupported {path}!")


def hft_unfold(hft: List[str], destdir='', *, fp=None, verbose=False) -> None:
    '''
    Unfold an HFT file.
    '''

    def fpclose(fp):
        # FIXME: the mode bit is unrelated to the HFT spec.
        fp.close()
        if fp.name.endswith('debian/rules'):
            os.chmod(fp.name, mode=stat.S_IRWXU | stat.S_IRGRP | stat.S_IROTH)

    # FIXME: the pattern matching could be improved
    if len(hft) == 0:  # Recursion boundary
        if fp is not None: fpclose(fp)
        return
    else:
        curline, restlines = hft[0], hft[1:]
        if curline.startswith('^#'):
            hft_unfold(restlines, destdir, fp=fp, verbose=verbose)
        elif curline.startswith('^'):
            if fp is not None: fpclose(fp)
            path = curline.split('^')[-1].strip()
            path = os.path.join(destdir, path)
            if os.path.exists(path):
                raise Exception(f'{path} already exists!')
            if not os.path.exists(os.path.dirname(path)):
                os.makedirs(os.path.dirname(path))
            fp = open(path, 'w')
            if verbose:
                print(path)
            hft_unfold(restlines, destdir, fp=fp, verbose=verbose)
        else:
            if fp is None:
                raise SyntaxError(f'Doesnt know where to write {hft}')
            fp.write(curline)
            hft_unfold(restlines, destdir, fp=fp, verbose=verbose)


if __name__ == '__main__':

    ag = argparse.ArgumentParser()
    ag.add_argument('-f', '--fold', type=str, default='', required=False,
            help='fold the given file or directory')
    ag.add_argument('-o', '--output', type=str, default='', required=False,
            help='specify output file of the folded result')
    ag.add_argument('-u', '--unfold', type=str, default='', required=False,
            help='unfold the given HFT file')
    ag.add_argument('-d', '--destdir', type=str, default='', required=False,
            help='destination directory when unfolding an HFT file')
    ag.add_argument('-S', '--spec', action='store_true', required=False,
            help='print the Hatless Folded Text spec')
    ag.add_argument('-v', '--verbose', action='store_true', required=False,
            help='toggle verbose mode')
    ag.add_argument('-V', '--version', action='store_true', required=False,
            help='print version information')
    ag, agparser = ag.parse_args(), ag

    # Misc info.
    if ag.version:
        print(f'Hatless Folded Text, Version {__VERSION__}')
        exit(0)
    elif ag.spec:
        print(__HFT_SPEC__)
        exit(0)

    # Do folding / unfolding
    if not any([ag.fold, ag.unfold]):
        agparser.print_help()
    elif all([ag.fold, ag.unfold]):
        raise ValueError("Both fold and unfold have been specified!")
    elif ag.fold:
        if not ag.output:
            outpath = re.sub('/*$', '', ag.fold) + '.hft'
            if os.path.exists(outpath):
                raise Exception(f"{outpath} already exists!")
            ag.output = outpath
        hft = hft_fold(ag.fold, verbose=ag.verbose)
        with open(ag.output, 'w') as f:
            f.writelines(hft)
    elif ag.unfold:
        with open(ag.unfold, 'r') as f:
            hft = f.readlines()
        hft_unfold(hft, ag.destdir, verbose=ag.verbose)
