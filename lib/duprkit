#!/bin/sh
set -e

__version__="0.0c"

dkGet () {
	# download something and check the checksum
	if test -r $src.blob; then return; fi
	if test -z "$src"; then echo "DK: Please define 'src'"; false; fi
	if test -z "$srcurl"; then echo "DK: Please define 'srcurl'"; false; fi
	if test -z "$md5sum"; then echo "DK: Please define 'md5sum'"; false; fi
	aria2c -c "$srcurl" -o $src.blob
	test "$md5sum" = "$(md5sum $src.blob | cut -d' ' -f1)" || \
		(echo "DK: Checksum $src.blob ... FAILED"; exit 1)
	if test -n "$DK_VERBOSE"; then echo "DK: Checksum $src.blob ... OK"; fi
}

dkGen_debian_changelog () {
	if ! test -r $1/debian/changelog; then
		if test -z "$src"; then echo "DK: Please define 'src'"; false; fi
		if test -z "$version"; then echo "DK: Please define 'version'"; false; fi
		if test -z "$maintainer"; then echo "DK: Please define 'maintainer'"; false; fi
		if test -n "$DK_VERBOSE"; then echo "DK: Generating $1/debian/changelog"; fi
		mkdir -p $1/debian
		cat > $1/debian/changelog <<EOF
$src ($version) experimental; urgency=low

  * Unofficial D**ian User Repo Release.
  * Built on $(uname -a)

 -- $maintainer  $(date -R)
EOF
	fi
}

dkGen_debian_control () {
	if ! test -r $1/debian/control; then
		if test -z "$src"; then echo "DK: Please define 'src'"; false; fi
		if test -z "$section"; then echo "DK: Please define 'section'"; false; fi
		if test -z "$stdver"; then echo "DK: Please define 'stdver'"; false; fi
		if test -z "$compat"; then echo "DK: Please define 'compat'"; false; fi
		if test -z "$maintainer"; then echo "DK: Please define 'maintainer'"; false; fi
		if test -z "$description"; then echo "DK: Please define 'description'"; false; fi
		if test -n "$DK_VERBOSE"; then echo "DK: Generating $1/debian/control"; fi
		build_depends_="$build_depends"
		if test -n "$(echo $dh_with | grep -o python)"; then
			build_depends_="$build_depends,dh-python,python3-all,python3-all-dev,python-all,python-all-dev,"
		fi
		mkdir -p $1/debian
		cat > $1/debian/control <<EOF
Source: $src
Section: $section
Homepage: $homepage
Priority: optional
Standards-Version: $stdver
Maintainer: D**ian User Repo Contributors
Uploaders: $maintainer
Build-Depends: debhelper-compat (= $compat), $build_depends_

Package: $src
Architecture: any
Multi-Arch: no
Depends: \${shlibs:Depends}, \${python:Depends}, \${python3:Depends},
  \${misc:Depends}, $depends
Description: $description
 $description
EOF
	fi
}

dkGen_debian_copyright () {
	if ! test -r $1/debian/copyright; then
		if test -z "$license"; then echo "DK: Please define 'license'"; false; fi
		if test -n "$DK_VERBOSE"; then echo "DK: Generating $1/debian/copyright"; fi
		mkdir -p $1/debian; echo "$license" > $1/debian/copyright
	fi
}

dkGen_debian_rules () {
	if ! test -r $1/debian/rules; then
		if test -n "$DK_VERBOSE"; then echo "DK: Generating $1/debian/rules"; fi
		if test -n "$dh_with"; then
			dh_with_="--with $dh_with"
		fi
		if test -n "$dh_buildsystem"; then
			dh_buildsystem_="-S$dh_buildsystem"
		fi
		mkdir -p $1/debian
		cat > $1/debian/rules <<EOF
#!/usr/bin/make -f
%:
	dh \$@ $dh_buildsystem_ $dh_with_
EOF
		chmod +x $1/debian/rules
	fi
}

dkGen_debian_source_format () {
	if ! test -r $1/debian/source/format; then
		if test -n "$DK_VERBOSE"; then echo "DK: Generating $1/debian/source/format"; fi
		if test -z "$source_format"; then
			mkdir -p $1/debian/source; echo "3.0 (native)" > $1/debian/source/format
		else
			mkdir -p $1/debian/source; echo "$source_format" > $1/debian/source/format
		fi
	fi
}


dkGen_SANITY_CHECK () {
	# make sure the fundamental files are present
	test -r $1/debian/changelog
	test -r $1/debian/control
	test -r $1/debian/copyright
	test -r $1/debian/rules
	test -r $1/debian/source/format
}

dkGenerate () {
	test -n "$1" || (echo "missing dest dir"; false)
	dkGen_debian_changelog $1
	dkGen_debian_control $1
	dkGen_debian_copyright $1
	dkGen_debian_rules $1
	dkGen_debian_source_format $1
	dkGen_SANITY_CHECK $1
}

dkSubst_ () {
   sed -i \
	   -e "s#@HOMEPAGE@#$homepage#g" \
	   -e "s#@SRCURL@#$srcurl#g" \
	   -e "s/@BUILD_DEPENDS@/$build_depends/g" \
	   -e "s/@COMPAT@/$compat/g" \
	   -e "s/@DATE_R@/$(date -R)/g" \
	   -e "s/@DEPENDS@/$depends/g" \
	   -e "s/@DESCRIPTION@/$description/g" \
	   -e "s/@DH_BUILDSYSTEM@/$dh_buildsystem/g" \
	   -e "s/@DH_WITH@/$dh_with/g" \
	   -e "s/@LICENSE@/$license/g" \
	   -e "s/@MAINTAINERS@/$maintainers/g" \
	   -e "s/@SECTION@/$section/g" \
	   -e "s/@SRC@/$src/g" \
	   -e "s/@STDVER@/$stdver/g" \
	   -e "s/@VERSION@/$version/g" \
	   $1
}

dkSubst () {
	for __file in $(find $1 -type f | sort); do
		if test -n "$DK_VERBOSE"; then echo "DK: Subst'ing placeholders in $__file"; fi
		dkSubst_ $__file
	done
}

dkStartBuild () {
	pushd $1
	dpkg-buildpackage -us -uc
	popd
}
